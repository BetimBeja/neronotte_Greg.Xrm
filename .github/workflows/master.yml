name: Build and release from master

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build solution
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
        
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'
          
      - uses: actions/cache@v1
        id: cache
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      
      - name: Restore NuGet packages
        # if: steps.cache.outputs.cache-hit != 'true'
        run: nuget restore Greg.Xrm.sln
      
      - name: Build solution
        run: MSBuild.exe $Env:GITHUB_WORKSPACE\Greg.Xrm.sln /t:Build /p:Configuration=Release
        
      - name: Echo
        run: echo $Env:GITHUB_WORKSPACE
        
      #- name: Zip SolutionManager
      #  uses: papeloto/action-zip@v1
      #  with:
      #    files: src/Greg.Xrm.SolutionManager/bin/Release/Plugins/
      #    dest: SolutionManager.zip 
      
      - name: Zip SolutionManager
        uses: montudor/action-zip@v01.1.1
        with:
          args: zip -qq -r SolutionManager.zip ${{ github.workspace }}\src\Greg.Xrm.SolutionManager\bin\Release\Plugins
      
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}_${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SolutionManager.zip
          asset_name: SolutionManager.zip
          asset_content_type: application/zip
          
          
          
          
          
